import networkx as nx
import pandas as pd
import json
from sklearn.model_selection import KFold


# MV and Hishigaki algorithms
def MV_and_Hishi_score(nodes, graph, seeds):
    for node in nodes:
        neighbors = list(graph.neighbors(node))
        seed_neighbors = sum(1 for neighbor in neighbors if neighbor in seeds)
        graph.nodes[node]["MV"] = seed_neighbors

        # Hishigaki Score Calculation
        ef = (len(seeds) * len(neighbors) / len(graph.nodes))
        nf = seed_neighbors
        if nf != 0:
            score = (nf - ef) ** 2 / ef
            graph.nodes[node]["Hishi"] = score  # Hishigaki score
        else:
            graph.nodes[node]["Hishi"] = 0


# K-Fold Cross-Validation with Top Scorer Comparison
def k_fold_cross_validation(graph, seeds_nodes, k):
    kf = KFold(n_splits=k, shuffle=True, random_state=42)
    seed_splits = list(kf.split(seeds_nodes))  # Split the dataset with seeds and nodes

    all_scores = {i: {} for i in range(1, k + 1)}  # To store all algorithm scores

    # List of DEPs (assuming "seeds.xlsx" contains them)
    diff = pd.read_excel("seeds.xlsx", sheet_name="DEPs")
    deps = [m for m in diff["preferredName"]]  # List of DEPs

    count = 0

    for train_indices, test_indices in seed_splits:
        count += 1
        # The train_seeds contain only the seeds of that index
        train_seeds_ini = [seeds_nodes[i] for i in train_indices]
        train_seeds = list(set(train_seeds_ini) & set(seeds))
        all_scores[count]["train_seeds"] = train_seeds

        # The test_seeds contain the seeds and nodes to be tested
        test_seeds = [seeds_nodes[i] for i in test_indices]
        all_scores[count]["test_seeds"] = list(set(test_seeds) & set(seeds)) # true seeds tested

        # Calculate MV and Hishigaki scores for all nodes
        MV_and_Hishi_score(test_seeds, graph, train_seeds)
        import RWR

        RWR.netprop(graph, train_seeds, 100, 0.1, 5)

        import algorithms

        algorithms.functional_flow(graph, train_seeds, 5)  # calculating functional flow score


        # Collect algorithm scores (MV, Hishi) for each fold
        all_scores[count]["MV"] = {}
        all_scores[count]["Hishi"] = {}
        all_scores[count]["DEP"] = {}
        all_scores[count]["RWR"] = {}
        all_scores[count]["FF"] = {}

        for node in test_seeds:
            all_scores[count]["MV"][node] = graph.nodes[node]["MV"]
            all_scores[count]["Hishi"][node] = graph.nodes[node]["Hishi"]
            if node in deps: # Store DEPs for this fold
                all_scores[count]["DEP"][node] = 1
            all_scores[count]["RWR"][node] = graph.nodes[node]['propagated_weight']
            all_scores[count]["FF"][node] = graph.nodes[node]['functional_score']

    # Save all the results to a JSON file
    with open("all_scores.json", 'w') as score_data:
        json.dump(all_scores, score_data, indent=4)


# Example usage:
graph = nx.read_gml("rice_network_0.7.gml")
data = pd.read_excel("seeds.xlsx", sheet_name="seeds")  # Reading reference file as a dataframe
seeds = [m for m in data["preferredName"]]  # List of seeds
# Get the list of seeds that exist in the graph
seeds = [s for s in seeds if s in graph.nodes]

# Combine the seeds and graph nodes and get only the unique ones
seeds_nodes = seeds + list(graph.nodes)
seeds_nodes = set(seeds_nodes)
seeds_nodes = list(seeds_nodes)

print(f"Number of seeds: {len(seeds)}")
print(f"Number of seeds and nodes: {len(seeds_nodes)}")

# Perform K-Fold Cross-Validation
average_precision = k_fold_cross_validation(graph, seeds_nodes, k=10)
