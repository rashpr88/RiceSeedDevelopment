import json
import numpy as np

# function for min-max normalization
def min_max_normalize(array, num):  
  min_val = np.min(array)
  max_val = np.max(array)
    
  if max_val == min_val:   
    return num  
    
  return (num - min_val) / (max_val - min_val)

with open('normalized_scores_new.json', 'r') as file:
  data = json.load(file)

algos = ['MV', 'Hishi', 'RWR', 'FF']

algo_scores = {'MV':{},'Hishi':{},'RWR':{},'FF':{},'Ensemble':{}}

dep = {}
norm_dep = {}

#normalizing scores for combined algorithm
for i in range(1,11):
  proteins = list(data[str(i)]['MV'].keys())
  for protein in proteins:
    dep_score = 0
    for algo in algos:
      dep_score += data[str(i)][algo][protein]
    if protein in data[str(i)]['DEP'].keys():
      dep_score += 1
    dep[protein] = dep_score

for protein, score in dep.items():
  dep_values = list(dep.values())
  norm_dep[protein] = min_max_normalize(dep_values, score)

# store the normalized scores as a json file
for i in range(1,11):
  for algo in algos:
    for protein in data[str(i)][algo].keys():
      algo_scores[algo][protein] = data[str(i)][algo][protein]
      algo_scores['Ensemble'][protein] = norm_dep[protein]

with open('algo_scores.json', 'w') as file:
  json.dump(algo_scores, file, indent=4)
